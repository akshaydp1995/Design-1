# Time Complexity : O(n^1/2) to initialize array??, O(1) put, O(1) get, O(1) remove
# Space Complexity : O(n), n = 1M
# Did this code successfully run on LeetCode : Yes
# Any problem you faced while coding this : Not sure if optimal, please confirm

class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.hashMap = [-1] * 1000
        
    def hash1(self, key):
        return key % 1000
    
    def hash2(self, key):
        return key // 1000

    def put(self, key: int, value: int) -> None:
        """
        value will always be non-negative.
        """
        index1 = self.hash1(key) 
        if self.hashMap[index1] == -1:
            self.hashMap[index1] = [-1] * 1001
        index2 = self.hash2(key)
        self.hashMap[index1][index2] = value
        return

    def get(self, key: int) -> int:
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        if type(self.hashMap[self.hash1(key)]) == list:
            return self.hashMap[self.hash1(key)][self.hash2(key)]
        return -1

    def remove(self, key: int) -> None:
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """
        if type(self.hashMap[self.hash1(key)]) == list: 
            self.hashMap[self.hash1(key)][self.hash2(key)] = -1
        return